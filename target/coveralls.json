{"repo_token":"NQ0y9evHfChnB1yHlQ1iOQzG726x0H9ZB","environment":{},"git":{"head":{"id":"700138fdbb260d8fe429a1adb1da3f60de0760b2","message":"Update pom.xml","author_name":"Pablo Bedoya","author_email":"pablo.reds@hotmail.com","committer_name":"Pablo Bedoya","committer_email":"pablo.reds@hotmail.com"},"branch":"master","remotes":[{"name":"origin","url":"https://github.com/bedoya/BombWordsRefactoring.git"}]},"source_files":[{"source":"package main.java.command;\n\npublic interface CommandAdicionarPalavraNaLista \n{\n\tpublic boolean adicionarPalavraNaLista();\n\tpublic void desfazerAdicionarPalavraNaLista();\n\tpublic String getPalavraAdicionar();\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null],"name":"main/java/command/CommandAdicionarPalavraNaLista.java"},{"source":"package main.java.command;\n\npublic interface CommandRemoverPalavrasDaLista \n{\n\tpublic void removerPalavrasDaLista();\n\tpublic void desfazerRemocaoPalavrasDaLista();\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null],"name":"main/java/command/CommandRemoverPalavrasDaLista.java"},{"source":"package main.java.command;\n\nimport main.java.fachadaparadao.FachadaDAO;\n\npublic class ConcreteCommandAdicionarPalavraNaLista implements CommandAdicionarPalavraNaLista\n{\n\tprivate String palavraAdicionar;\n\tprivate String traducaoPalavraAdicionar;\n\tprivate String nomeDaListaAdicionarPalavra;\n\t\n\t\n\tpublic ConcreteCommandAdicionarPalavraNaLista(String palavraAdd, String traducaoAdd, String nomeLista)\n\t{\n\t\tthis.palavraAdicionar = palavraAdd;\n\t\tthis.traducaoPalavraAdicionar = traducaoAdd;\n\t\tthis.nomeDaListaAdicionarPalavra = nomeLista;\n\t}\n\t\n\t\n\tpublic String getPalavraAdicionar()\n\t{\n\t\treturn this.palavraAdicionar;\n\t}\n\t\n\t\n\tpublic boolean adicionarPalavraNaLista()\n\t{\n\t\tboolean conseguiuAdicionarPalavraNaLista;\n\t\tconseguiuAdicionarPalavraNaLista = \n\t\t\t\tFachadaDAO.getFachadaDAO().adicionarNovaPalavraNaLista(nomeDaListaAdicionarPalavra, palavraAdicionar, traducaoPalavraAdicionar);\n\t\t\n\t\treturn conseguiuAdicionarPalavraNaLista;\n\t}\n\t\n\t\n\tpublic void desfazerAdicionarPalavraNaLista()\n\t{\n\t\tFachadaDAO.getFachadaDAO().removerPalavraDaLista(nomeDaListaAdicionarPalavra, traducaoPalavraAdicionar);\n\t}\n\t\n\t\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,0,null,null,null,null,null,null,0,null,null,0,null,null,null,null,null,0,0,null,null,null,null,null],"name":"main/java/command/ConcreteCommandAdicionarPalavraNaLista.java"},{"source":"package main.java.command;\n\nimport java.util.LinkedList;\n\nimport main.java.fachadaparadao.FachadaDAO;\n\n\npublic class ConcreteCommandRemoverPalavrasDaLista implements CommandRemoverPalavrasDaLista\n{\n\tprivate LinkedList<String> palavrasRemover;\n\tprivate LinkedList<String> traducoesDasPalavrasRemover;\n\tprivate String nomeDaListaRemoverPalavra;\n\t\n\tpublic ConcreteCommandRemoverPalavrasDaLista(LinkedList<String> palavrasRemover, LinkedList<String> traducoesDasPalavrasRemover, String nomeDaListaRemoverPalavras)\n\t{\n\t\tthis.palavrasRemover = palavrasRemover;\n\t\tthis.traducoesDasPalavrasRemover = traducoesDasPalavrasRemover; \n\t\tthis.nomeDaListaRemoverPalavra = nomeDaListaRemoverPalavras;\n\t}\n\t\n\tpublic void removerPalavrasDaLista()\n\t{\n\t\tfor(int i = 0; i < palavrasRemover.size(); i++)\n\t\t{\n\t\t\tString traducaoPalavraRemover = this.traducoesDasPalavrasRemover.get(i);\n\t\t\tFachadaDAO.getFachadaDAO().removerPalavraDaLista(this.nomeDaListaRemoverPalavra, traducaoPalavraRemover);\n\t\t}\n\t}\n\t\n\tpublic void desfazerRemocaoPalavrasDaLista()\n\t{\n\t\tfor(int i = 0; i < palavrasRemover.size(); i++)\n\t\t{\n\t\t\tString palavraInserirNovamente = this.palavrasRemover.get(i);\n\t\t\tString traducaoPalavraInserirNovamente = this.traducoesDasPalavrasRemover.get(i);\n\t\t\t\n\t\t\tFachadaDAO.getFachadaDAO().adicionarNovaPalavraNaLista(nomeDaListaRemoverPalavra, palavraInserirNovamente, traducaoPalavraInserirNovamente);\n\t\t}\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,0,null,0,0,null,0,null,null,null,0,null,0,0,null,0,null,0,null,null,null],"name":"main/java/command/ConcreteCommandRemoverPalavrasDaLista.java"},{"source":"package main.java.dao;\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\n\npublic class ConcreteDAOConfiguracoesDeJogoArquivos  implements DAOConfiguracoesDeJogo\n{\n\t@Override\n\tpublic String[] lerConfiguracoesJogo() \n\t{\n\t\ttry\n\t\t{\n\t\t\tString [] configuracoes = new String[2];\n\t\t\tFileInputStream leitor = new FileInputStream(\"textos/configuracoes.txt\");\n\t\t\tReader reader = new InputStreamReader(leitor, \"UTF-8\");\n\t\t\tBufferedReader filtroLeitura = new BufferedReader(reader);\n\t\t\tString stringLida = filtroLeitura.readLine();\n\t\t\tint linhaLida = 0;\n\t\t\twhile(stringLida != null)\n\t\t\t{\n\t\t\t\tString [] stringLidaSplit = stringLida.split(\":\");\n\t\t\t\tconfiguracoes[linhaLida] = stringLidaSplit[1];\n\t\t\t\tstringLida = filtroLeitura.readLine();\n\t\t\t\tlinhaLida = linhaLida + 1;\n\t\t\t}\n\t\t\t\n\t\t\tfiltroLeitura.close();\n\t\t\treader.close();\n\t\t\tleitor.close();\n\t\t\treturn configuracoes;\n\t\t\n\t\t}\n\t\tcatch(IOException exc)\n\t\t{\n\t\t\tSystem.out.println(\"erro na leitura das configuracoes do jogo:\" + exc);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void setarNovasConfiguracoesJogo(int tempoParaSetarBomba,\n\t\t\tint tempoParaBombaExplodir) \n\t{\n\t\ttry \n\t\t{\t\n\t\t\tFileOutputStream escreve = new FileOutputStream(\"textos/configuracoes.txt\");\n\t\t\tOutputStreamWriter filtroEscreve = new OutputStreamWriter(escreve, \"UTF8\");\n\t\t\t\n\t\t\tfiltroEscreve.write(\"segundos ate inserir novas bombas:\" + tempoParaSetarBomba + \"\\r\\n\");\n\t\t\tfiltroEscreve.write(\"segundos ate uma bomba explodir:\" + tempoParaBombaExplodir + \"\\r\\n\");\n\t\t\t\n\t\t\tfiltroEscreve.flush();\n\t\t\tfiltroEscreve.close();\n\t\t\tescreve.close();\n\t\t} \n\t\tcatch (IOException e) \n\t\t{\n\t\t\tSystem.out.println(e);\n\t\t}\n\t\t\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,0,0,0,0,0,0,0,null,0,0,0,0,0,null,0,0,0,0,null,null,0,null,0,0,null,null,null,null,null,null,null,null,null,0,0,null,0,0,null,0,0,0,null,0,null,0,0,null,0,null,null,null],"name":"main/java/dao/ConcreteDAOConfiguracoesDeJogoArquivos.java"},{"source":"package main.java.dao;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\n\n\npublic class ConcreteDAOListaDePalavrasArquivos implements DAOListaDePalavras\n{\n\t@Override\n\tpublic boolean criarNovaListaPalavras(String nomeLista) \n\t{\n\t\ttry\n\t\t{\n\t\t\t//primeiro, vamos ver se a lista jÃ¡ existe\n\t\t\tboolean listaJahExiste = this.listaJahExiste(nomeLista);\n\t\t\t\n\t\t\tif(listaJahExiste == false)\n\t\t\t{\n\t\t\t\tString enderecoLista = \"textos/\" + nomeLista + \".txt\";\n\t\t\t\tFileOutputStream escreve = new FileOutputStream(enderecoLista);\n\t\t\t\tOutputStreamWriter filtroEscreve = new OutputStreamWriter(escreve, \"UTF8\");\n\t\t\t\tfiltroEscreve.flush();\n\t\t\t\tfiltroEscreve.close();\n\t\t\t\tescreve.close();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tcatch(IOException e)\n\t\t{\n\t\t\treturn false;\n\t\t}\t\n\t\t\n\t}\n\t\n\tprivate boolean listaJahExiste(String nomeLista)//ve se uma lista com esse nome jah existe no jogo.\n\t{\n\t\tboolean listaExiste = false;\n\t\tString arquivoLista = nomeLista + \".txt\";\n\t\tFile pastaListas = new File(\"textos\");\n\t\tString[] nomesListasPasta = pastaListas.list();\n\t\tString percorredorNomesListasPasta = \"\";\n\t\tfor(int i = 0; i < nomesListasPasta.length; i++)\n\t\t{\n\t\t\tpercorredorNomesListasPasta = nomesListasPasta[i];\n\t\t\tif(percorredorNomesListasPasta.compareTo(arquivoLista) == 0)\n\t\t\t{\n\t\t\t\tlistaExiste = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn listaExiste;\n\t}\n\t\n\n\t@Override\n\tpublic boolean removerListaPalavras(String nomeLista) \n\t{\n\t\t//primeiro, vamos ver se a lista existe\n\t\tboolean listaJahExiste = this.listaJahExiste(nomeLista);\n\t\t\t\t\n\t\tif(listaJahExiste == false)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(nomeLista.compareTo(\"palavras\") == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tString nomeArquivoLista = \"textos/\" + nomeLista + \".txt\";\n\t\t\t\tFile arquivoLista = new File(nomeArquivoLista);\n\t\t\t\tarquivoLista.delete();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\t\n\t}\n\n\t@Override\n\tpublic boolean limparListaPalavras(String nomeLista) \n\t{\n\t\t//primeiro, vamos ver se a lista existe\n\t\tboolean listaJahExiste = this.listaDePalavrasJahExiste(nomeLista);\n\t\t\n\t\tif(listaJahExiste == false)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tString nomeArquivoLista = \"textos/\" + nomeLista + \".txt\";\n\t\t\t\tFileOutputStream escreve = new FileOutputStream(nomeArquivoLista);\n\t\t\t\tOutputStreamWriter filtroEscreve = new OutputStreamWriter(escreve, \"UTF8\");\n\t\t\t\tfiltroEscreve.close();\n\t\t\t\tescreve.close();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcatch(IOException exc)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\t\n\t\t}\n\t\t\t\n\t}\n\t\n\t@Override\n\tpublic String[] extrairNomesDeTodasAsListasDePalavras() \n\t{\n\t\tFile file = new File(\"textos\");\n\t\tString[] nomesDasListas = file.list();\n\t\tString[] nomesListasSohPalavras = new String[nomesDasListas.length - 3];\n\t\t/* na pasta \"textos\",\n\t\t\talem das listas de palavras que podem \n\t\t\tser usadas no jogo, hÃ¡ o placar e as configuracÃµes. vamos remover os dois.*/\n\t\tint percorreNomesListasSohPalavras = 0;\n\t\tfor(int i = 0; i < nomesDasListas.length; i++)\n\t\t{\n\t\t\tif(nomesDasListas[i].compareTo(\"configuracoes.txt\") != 0 &&\n\t\t\t\t\tnomesDasListas[i].compareTo(\"highscore.txt\") != 0 && nomesDasListas[i].compareTo(\"listaaserusadanojogo.txt\") != 0)\n\t\t\t{\n\t\t\t\tnomesListasSohPalavras[percorreNomesListasSohPalavras] = nomesDasListas[i];\n\t\t\t\tpercorreNomesListasSohPalavras = percorreNomesListasSohPalavras + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\treturn nomesListasSohPalavras;\n\t}\n\n\t@Override\n\tpublic boolean listaDePalavrasJahExiste(String nomeLista)//vï¿½ se uma lista com esse nome jÃ¡ existe no jogo. \n\t{\n\t\tboolean listaExiste = false;\n\t\tString arquivoLista = nomeLista + \".txt\";\n\t\tFile pastaListas = new File(\"textos\");\n\t\tString[] nomesListasPasta = pastaListas.list();\n\t\tString percorredorNomesListasPasta = \"\";\n\t\tfor(int i = 0; i < nomesListasPasta.length; i++)\n\t\t{\n\t\t\tpercorredorNomesListasPasta = nomesListasPasta[i];\n\t\t\tif(percorredorNomesListasPasta.compareTo(arquivoLista) == 0)\n\t\t\t{\n\t\t\t\tlistaExiste = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn listaExiste;\n\t}\n\t\n\t@Override\n\tpublic boolean mudarListaASerUsadaNoJogo(String nomeListaAtual) \n\t{\n\t\ttry\n\t\t{\n\t\t\tString nomeArquivoListaJogo = \"textos/listaaserusadanojogo.txt\";\n\t\t\tFileOutputStream escreve = new FileOutputStream(nomeArquivoListaJogo);\n\t\t\tOutputStreamWriter filtroEscreve = new OutputStreamWriter(escreve, \"UTF8\");\n\t\t\tfiltroEscreve.write(nomeListaAtual);\n\t\t\tfiltroEscreve.close();\n\t\t\tescreve.close();\n\t\t\treturn true;\n\t\t}\n\t\tcatch(IOException exc)\n\t\t{\n\t\t\tSystem.out.println(\"erro I/O na funcionalidade jogar com lista visualizada:\" + exc);\n\t\t\treturn false;\n\t\t}\n\t\t\n\t}\n\t\n\t@Override\n\tpublic String pegarNomeListaASerUsadaNoJogo() \n\t{\n\t\ttry\n\t\t{\n\t\t\tFileInputStream leitor = new FileInputStream(\"textos/listaaserusadanojogo.txt\");\n\t\t\tReader reader = new InputStreamReader(leitor, \"UTF-8\");\n\t\t\tBufferedReader buff = new BufferedReader(reader);\n\t\t\tString listaASerUsadaNoJogo = buff.readLine();\n\t\t\treturn listaASerUsadaNoJogo;\n\t\t}\n\t\tcatch(FileNotFoundException e) \n\t\t{\n\t\t\tSystem.out.println(\"lista a ser usada no jogo nao encontrada\");\n\t\t\treturn \"palavras\";\n\t\t}\n\t\tcatch(IOException exc)\n\t\t{\n\t\t\tSystem.out.println(\"excecao IO ao tentar pegar lista a ser usada no jogo\");\n\t\t\treturn \"palavras\";\n\t\t}\n\t}\n\t\n\t\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,0,null,0,null,0,0,0,0,0,0,0,null,null,null,0,null,null,null,0,null,0,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,0,0,null,null,0,null,null,null,null,null,null,null,0,null,0,null,0,null,null,null,0,null,0,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,0,null,0,null,0,null,null,null,null,null,0,0,0,0,0,0,null,0,null,0,null,null,null,null,null,null,null,null,0,0,0,null,null,null,0,0,null,0,null,null,0,0,null,null,null,null,0,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,0,0,null,null,0,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,0,null,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,null,0,0,null,0,null,0,0,null,null,null,null,null,null,null],"name":"main/java/dao/ConcreteDAOListaDePalavrasArquivos.java"},{"source":"package main.java.dao;\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\nimport java.util.LinkedList;\n\nimport main.java.jogo.PalavrasETraducoes;\n\n\n\npublic class ConcreteDAOPalavrasDeListaArquivos implements DAOPalavrasDeLista\n{\n\t@Override\n\tpublic PalavrasETraducoes extrairPalavrasETraducoes(String listaOndeEstaoOsDados) \n\t{\n\t\ttry \n\t\t{\n\t\t\tString localArquivo = \"textos/\" + listaOndeEstaoOsDados + \".txt\";\n\t\t\tFileInputStream leitor = new FileInputStream(localArquivo);\n\t\t\tReader reader = new InputStreamReader(leitor, \"UTF-8\");\n\t\t\tBufferedReader buff = new BufferedReader(reader);\n\t\t\tString linhaDoArquivo = buff.readLine();\n\t\t\t\n\t\t\tint percorredorPalavras = 0;\n\t\t\tint percorredorTraducoes = 0;\n\t\t\t\n\t\t\tLinkedList<String> palavras = new LinkedList<String>();\n\t\t\tLinkedList<String> traducoes = new LinkedList<String>();\n\t\t\t\n\t\t\twhile(linhaDoArquivo != null)\n\t\t\t{\n\t\t\t\tString[] linhaSplitada = linhaDoArquivo.split(\";\");\n\t\t\t\tpalavras.add(percorredorPalavras, linhaSplitada[0]);\n\t\t\t\tpercorredorPalavras = percorredorPalavras + 1;\n\t\t\t\ttraducoes.add(percorredorTraducoes, linhaSplitada[1]);\n\t\t\t\tpercorredorTraducoes = percorredorTraducoes + 1;\n\t\t\t\tlinhaDoArquivo = buff.readLine();\n\t\t\t}\n\t\t\t\n\t\t\tbuff.close();\n\t\t\treader.close();\n\t\t\tleitor.close();\n\t\t\tPalavrasETraducoes palavrasETraducoesDesordenadas = new PalavrasETraducoes(palavras, traducoes);\n\t\t\tPalavrasETraducoes palavrasETraducoesOrdenadas = this.ordenarPalavrasETraducoes(palavrasETraducoesDesordenadas);\n\t\t\t\n\t\t\treturn palavrasETraducoesOrdenadas;\n\t\t} \n\t\tcatch(FileNotFoundException e) \n\t\t{\n\t\t\tSystem.out.println(\"lista nao encontrada:\" + listaOndeEstaoOsDados);\n\t\t\treturn null;\n\t\t}\n\t\tcatch(IOException exc)\n\t\t{\n\t\t\tSystem.out.println(\"excecao IO\");\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\tprivate PalavrasETraducoes ordenarPalavrasETraducoes(PalavrasETraducoes listaDePalavrasETraducoes)\n\t{\n\t\tPalavrasETraducoes listaOrdenada;\n\t\tLinkedList<String> palavras = listaDePalavrasETraducoes.getPalavras();\n\t\tLinkedList<String> traducoes = listaDePalavrasETraducoes.getTraducoes();\n\t\t\n\t\tif(palavras.size() > 1)\n\t\t{\n\t\t\tint percorredorPalavras = 0;\n\t\t\tString auxiliarTroca;//auxiliar para trocas na ordenacao das palavras.\n\t\t\twhile(percorredorPalavras < palavras.size())\n\t\t\t{\n\t\t\t\tfor(int i = percorredorPalavras + 1; i < palavras.size(); i++)\n\t\t\t\t{\n\t\t\t\t\t//if abaixo compara duas palavras da lista de palavras pra ver se a da esquerda \n\t\t\t\t\t//vem antes da palavra na direita\n\t\t\t\t\tif(palavras.get(i).compareTo(palavras.get(percorredorPalavras)) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tauxiliarTroca = palavras.get(i);\n\t\t\t\t\t\tpalavras.set(i, palavras.get(percorredorPalavras));\n\t\t\t\t\t\tpalavras.set(percorredorPalavras, auxiliarTroca);\n\t\t\t\t\t\t\n\t\t\t\t\t\tauxiliarTroca = traducoes.get(i);\n\t\t\t\t\t\ttraducoes.set(i, traducoes.get(percorredorPalavras));\n\t\t\t\t\t\ttraducoes.set(percorredorPalavras, auxiliarTroca);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpercorredorPalavras = percorredorPalavras + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlistaDePalavrasETraducoes.setPalavras(palavras);\n\t\tlistaDePalavrasETraducoes.setTraducoes(traducoes);\n\t\tlistaOrdenada = listaDePalavrasETraducoes;\n\t\t\n\t\treturn listaOrdenada;\n\t}\n\t\n\t@Override\n\tpublic boolean adicionarNovaPalavraNaLista(String nomeLista,\n\t\t\tString palavraNova, String traducaoNova) \n\t{\n\t\t\n\t\tPalavrasETraducoes listaPalavrasETraducoes = this.extrairPalavrasETraducoes(nomeLista);\n\t\tif(listaPalavrasETraducoes != null)\n\t\t{\n\t\t\tint quantasPalavrasNoArquivo = listaPalavrasETraducoes.getNumPalavrasNoJogo();\n\t\t\tLinkedList<String> palavras = new LinkedList<String>();\n\t\t\tLinkedList<String> traducoes = new LinkedList<String>();\n\t\t\t\n\t\t\tfor(int i = 0; i < quantasPalavrasNoArquivo; i++)\n\t\t\t{\n\t\t\t\tpalavras.add(listaPalavrasETraducoes.getPalavra(i));\n\t\t\t\ttraducoes.add(listaPalavrasETraducoes.getTraducao(i));\n\t\t\t}\n\t\t\t\n\t\t\tString novaPalavra = palavraNova;\n\t\t\tString novaTraducao = traducaoNova;\n\t\t\t\n\t\t\tpalavras.add(novaPalavra);\n\t\t\ttraducoes.add(novaTraducao);\n\t\t\t\t\n\t\t\t//agora vamos adicionar nova palavra no txt\n\t\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\tString enderecoLista = \"textos/\" + nomeLista + \".txt\";\n\t\t\t\tFileOutputStream escreve = new FileOutputStream(enderecoLista);\n\t\t\t\tOutputStreamWriter filtroEscreve = new OutputStreamWriter(escreve, \"UTF8\");\n\t\t\t\tfor(int j = 0; j < palavras.size(); j++)\n\t\t\t\t{\n\t\t\t\t\tString linhaNova = palavras.get(j) + \";\" + traducoes.get(j);\n\t\t\t\t\tfiltroEscreve.write(linhaNova +\"\\r\\n\");\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\tfiltroEscreve.flush();\n\t\t\t\tfiltroEscreve.close();\n\t\t\t\tescreve.close();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcatch(IOException e)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"excecao IO ao tentar escrever no arquivo palavras.txt\");\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t@Override\n\tpublic void removerPalavraDaLista(String nomeDalista,\n\t\t\tString traducaoDaPalavraASerRemovida) \n\t{\n\t\tPalavrasETraducoes listaDePalavrasETraducoes = this.extrairPalavrasETraducoes(nomeDalista);\n\t\tint quantasPalavrasNoArquivo = listaDePalavrasETraducoes.getNumPalavrasNoJogo();\n\t\tLinkedList<String> palavras = new LinkedList<String>();\n\t\tLinkedList<String> traducoes = new LinkedList<String>();\n\t\t\n\t\tfor(int i = 0; i < quantasPalavrasNoArquivo; i++)\n\t\t{\n\t\t\tpalavras.add(listaDePalavrasETraducoes.getPalavra(i));\n\t\t\ttraducoes.add(listaDePalavrasETraducoes.getTraducao(i));\n\t\t}\n\t\t\n\t\tString traducaoPalavraRemovida = traducaoDaPalavraASerRemovida;\n\t\tif(traducaoPalavraRemovida.compareTo(\"\") == 0)\n\t\t{\n\t\t\tSystem.out.println(\"traducao da palavra a ser removida nao informada\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//acharemos a palavra a ser removida\n\t\t\tint indiceParaRemocao = -1;\n\t\t\t\n\t\t\tfor(int i = 0; i < traducoes.size(); i++)\n\t\t\t{\n\t\t\t\tString traducao = traducoes.get(i);\n\t\t\t\tif(traducao.compareTo(traducaoPalavraRemovida) == 0)\n\t\t\t\t{\n\t\t\t\t\tindiceParaRemocao = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(indiceParaRemocao == -1)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"traducao nao encontrada\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttraducoes.remove(indiceParaRemocao);\n\t\t\t\tpalavras.remove(indiceParaRemocao);\n\t\t\t\t\n\t\t\t\t//agora vamos inserir o resto das palavras no txt\n\t\t\t\t\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tString enderecoLista = \"textos/\" + nomeDalista + \".txt\";\n\t\t\t\t\tFileOutputStream escreve = new FileOutputStream(enderecoLista);\n\t\t\t\t\tOutputStreamWriter filtroEscreve = new OutputStreamWriter(escreve, \"UTF8\"); \n\t\t\t\t\tfor(int j = 0; j < palavras.size(); j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tString linhaNova = palavras.get(j) + \";\" + traducoes.get(j);\n\t\t\t\t\t\tfiltroEscreve.write(linhaNova +\"\\r\\n\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfiltroEscreve.flush();\n\t\t\t\t\tfiltroEscreve.close();\n\t\t\t\t\tescreve.close();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch(IOException e)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"excecao IO ao tentar escrever no arquivo \" + nomeDalista + \".txt\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,0,0,0,0,0,null,0,0,null,0,0,null,0,null,0,0,0,0,0,0,0,null,0,0,0,0,0,null,0,null,0,null,0,0,null,0,null,0,0,null,null,null,null,null,null,0,0,null,0,null,0,null,0,null,0,null,null,null,0,null,0,0,0,null,0,0,0,null,null,0,null,null,null,0,0,0,null,0,null,null,null,null,null,null,null,0,0,null,0,0,0,null,0,null,0,0,null,null,0,0,null,0,0,null,null,null,null,null,0,0,0,0,null,0,0,null,null,0,0,0,0,null,0,null,0,null,null,null,0,null,null,null,null,null,null,0,0,0,0,null,0,null,0,0,null,null,0,0,null,0,null,null,null,null,0,null,0,null,0,0,null,0,null,null,null,0,null,0,null,null,null,0,0,null,null,null,null,null,0,0,0,0,null,0,0,null,null,0,0,0,null,null,0,null,0,0,null,null,0,null,null,null],"name":"main/java/dao/ConcreteDAOPalavrasDeListaArquivos.java"},{"source":"package main.java.dao;\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\n\npublic class ConcreteDAORankingArquivos implements DAORanking\n{\n\t@Override\n\tpublic void inserirJogadorRanking(String nomeJogador, int pontuacao) \n\t{\n\t\ttry\n\t\t{\n\t\t\tString [] configuracoes = this.lerConfiguracoesJogo();\n\t\t\tString [] ranking = lerRanking();\n\t\t\tif(ranking != null)\n\t\t\t{\n\t\t\t\tfor(int i = 0; i < ranking.length; i++)\n\t\t\t\t{\n\t\t\t\t\tString[] separaRanking = ranking[i].split(\";\");\n\t\t\t\t\tint placarRanking = Integer.valueOf(separaRanking[1]);\n\t\t\t\t\tif(placarRanking < pontuacao)\n\t\t\t\t\t{\n\t\t\t\t\t\tranking[i] = nomeJogador + \";\" + pontuacao + \";\" + configuracoes[0] + \";\" + configuracoes[1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//agora, vamos reescrever no ranking\n\t\t\t\tFileOutputStream escreve = new FileOutputStream(\"textos/highscore.txt\");\n\t\t\t\tOutputStreamWriter filtroEscreve = new OutputStreamWriter(escreve, \"UTF8\");\n\t\t\t\tfor(int j = 0; j < ranking.length; j++)\n\t\t\t\t{\n\t\t\t\t\tfiltroEscreve.write(ranking[j] +\"\\r\\n\");\n\t\t\t\t}\n\t\t\t\tfiltroEscreve.flush();\n\t\t\t\tfiltroEscreve.close();\n\t\t\t\tescreve.close();\t\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\tcatch(IOException exc)\n\t\t{\n\t\t\tSystem.err.println(\"erro na escrita do placar:\" + exc);\n\t\t}\n\t\t\n\t}\n\t\n\tpublic String[] lerConfiguracoesJogo() \n\t{\n\t\ttry\n\t\t{\n\t\t\tString [] configuracoes = new String[2];\n\t\t\tFileInputStream leitor = new FileInputStream(\"textos/configuracoes.txt\");\n\t\t\tReader reader = new InputStreamReader(leitor, \"UTF-8\");\n\t\t\tBufferedReader filtroLeitura = new BufferedReader(reader);\n\t\t\tString stringLida = filtroLeitura.readLine();\n\t\t\tint linhaLida = 0;\n\t\t\twhile(stringLida != null)\n\t\t\t{\n\t\t\t\tString [] stringLidaSplit = stringLida.split(\":\");\n\t\t\t\tconfiguracoes[linhaLida] = stringLidaSplit[1];\n\t\t\t\tstringLida = filtroLeitura.readLine();\n\t\t\t\tlinhaLida = linhaLida + 1;\n\t\t\t}\n\t\t\t\n\t\t\tfiltroLeitura.close();\n\t\t\treader.close();\n\t\t\tleitor.close();\n\t\t\treturn configuracoes;\n\t\t\n\t\t}\n\t\tcatch(IOException exc)\n\t\t{\n\t\t\tSystem.out.println(\"erro na leitura das configuracoes do jogo:\" + exc);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@Override\n\tpublic String[] lerRanking() \n\t{\n\t\ttry\n\t\t{\n\t\t\tString [] ranking = new String [8];\n\t\t\t\n\t\t\tFileInputStream leitor = new FileInputStream(\"textos/highscore.txt\");\n\t\t\tReader reader = new InputStreamReader(leitor, \"UTF-8\");\n\t\t\tBufferedReader filtroLeitura = new BufferedReader(reader);\n\t\t\tString stringLida = filtroLeitura.readLine();\n\t\t\tint linhaLida = 0;\n\t\t\twhile(stringLida != null)\n\t\t\t{\n\t\t\t\tranking[linhaLida] = stringLida;\n\t\t\t\tstringLida = filtroLeitura.readLine();\n\t\t\t\tlinhaLida = linhaLida + 1;\n\t\t\t}\n\t\t\t\n\t\t\tfiltroLeitura.close();\n\t\t\treader.close();\n\t\t\tleitor.close();\n\t\t\treturn ranking;\n\t\t}\n\t\tcatch(IOException exc)\n\t\t{\n\t\t\tSystem.err.println(\"erro na leitura do placar:\" + exc);\n\t\t\treturn null;\n\t\t}\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,0,0,0,null,0,null,0,0,0,null,0,0,null,null,null,null,0,0,0,null,0,null,0,0,0,null,null,null,0,null,0,0,null,0,null,null,null,null,null,0,0,0,0,0,0,0,null,0,0,0,0,0,null,0,0,0,0,null,null,0,null,0,0,null,null,null,null,null,null,null,null,0,null,0,0,0,0,0,0,null,0,0,0,null,null,0,0,0,0,null,0,null,0,0,null,null,null,null,null],"name":"main/java/dao/ConcreteDAORankingArquivos.java"},{"source":"package main.java.dao;\n\npublic interface DAOConfiguracoesDeJogo \n{\n\tpublic String [] lerConfiguracoesJogo();\n\tpublic void setarNovasConfiguracoesJogo(int tempoParaSetarBomba, int tempoParaBombaExplodir);\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null],"name":"main/java/dao/DAOConfiguracoesDeJogo.java"},{"source":"package main.java.dao;\n\npublic interface DAOListaDePalavras\n{\n\tpublic boolean criarNovaListaPalavras(String nomeLista);\n\tpublic boolean removerListaPalavras(String nomeLista);\n\tpublic boolean limparListaPalavras(String nomeLista);\n\t\n\tpublic String [] extrairNomesDeTodasAsListasDePalavras();\n\tpublic boolean listaDePalavrasJahExiste(String nomeLista);\n\t\n\tpublic boolean mudarListaASerUsadaNoJogo(String nomeLista);\n\tpublic String pegarNomeListaASerUsadaNoJogo();\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"name":"main/java/dao/DAOListaDePalavras.java"},{"source":"package main.java.dao;\n\nimport main.java.jogo.PalavrasETraducoes;\n\npublic interface DAOPalavrasDeLista \n{\n\tpublic PalavrasETraducoes extrairPalavrasETraducoes(String listaOndeEstaoOsDados);\n\t\n\tpublic boolean adicionarNovaPalavraNaLista(String nomeLista, String palavraNova, String traducaoNova);\n\tpublic void removerPalavraDaLista(String nomeDalista, String traducaoDaPalavraASerRemovida);\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null],"name":"main/java/dao/DAOPalavrasDeLista.java"},{"source":"package main.java.dao;\n\npublic interface DAORanking \n{\n\tpublic void inserirJogadorRanking(String nomeJogador, int pontuacao);\n\tpublic String [] lerRanking(); \n\n}\n","coverage":[null,null,null,null,null,null,null,null,null],"name":"main/java/dao/DAORanking.java"},{"source":"package main.java.fachadaparadao;\n\nimport main.java.dao.ConcreteDAOConfiguracoesDeJogoArquivos;\nimport main.java.dao.ConcreteDAOListaDePalavrasArquivos;\nimport main.java.dao.ConcreteDAOPalavrasDeListaArquivos;\nimport main.java.dao.ConcreteDAORankingArquivos;\nimport main.java.dao.DAOConfiguracoesDeJogo;\nimport main.java.dao.DAOListaDePalavras;\nimport main.java.dao.DAOPalavrasDeLista;\nimport main.java.dao.DAORanking;\nimport main.java.jogo.PalavrasETraducoes;\n\npublic class FachadaDAO \n{\n\tprivate static FachadaDAO singletonFachadaDAO;\n\tprivate DAOConfiguracoesDeJogo acessaConfiguracoesJogo;\n\tprivate DAOListaDePalavras acessaListasDePalavras;\n\tprivate DAOPalavrasDeLista acessaPalavrasDeLista;\n\tprivate DAORanking acessaRanking;\n\t\n\t\n\tprivate FachadaDAO()\n\t{\n\t\tthis.acessaConfiguracoesJogo = new ConcreteDAOConfiguracoesDeJogoArquivos();\n\t\tthis.acessaListasDePalavras = new ConcreteDAOListaDePalavrasArquivos();\n\t\tthis.acessaPalavrasDeLista = new ConcreteDAOPalavrasDeListaArquivos();\n\t\tthis.acessaRanking = new ConcreteDAORankingArquivos();\n\t}\n\t\n\tpublic synchronized static FachadaDAO getFachadaDAO()\n\t{\n\t\tif(singletonFachadaDAO == null)\n\n\t\t{\n\t\t\tsingletonFachadaDAO = new FachadaDAO();\n\t\t}\n\t\t\n\t\treturn singletonFachadaDAO;\n\t}\n\t\n\tpublic String [] lerConfiguracoesJogo()\n\t{\n\t\treturn this.acessaConfiguracoesJogo.lerConfiguracoesJogo();\n\t}\n\t\n\tpublic void setarNovasConfiguracoesJogo(int tempoParaSetarBomba, int tempoParaBombaExplodir)\n\t{\n\t\tthis.acessaConfiguracoesJogo.setarNovasConfiguracoesJogo(tempoParaSetarBomba, tempoParaBombaExplodir);\n\t}\n\t\n\tpublic boolean criarNovaListaPalavras(String nomeLista)\n\t{\n\t\treturn this.acessaListasDePalavras.criarNovaListaPalavras(nomeLista);\n\t}\n\t\n\tpublic boolean removerListaPalavras(String nomeLista)\n\t{\n\t\treturn this.acessaListasDePalavras.removerListaPalavras(nomeLista);\n\t}\n\t\n\tpublic boolean limparListaPalavras(String nomeLista)\n\t{\n\t\treturn this.acessaListasDePalavras.limparListaPalavras(nomeLista);\n\t}\n\t\n\tpublic String [] extrairNomesDeTodasAsListasDePalavras()\n\t{\n\t\treturn this.acessaListasDePalavras.extrairNomesDeTodasAsListasDePalavras();\n\t}\n\t\n\tpublic boolean listaDePalavrasJahExiste(String nomeLista)\n\t{\n\t\treturn this.acessaListasDePalavras.listaDePalavrasJahExiste(nomeLista);\n\t}\n\t\n\tpublic boolean mudarListaASerUsadaNoJogo(String nomeLista)\n\t{\n\t\treturn this.acessaListasDePalavras.mudarListaASerUsadaNoJogo(nomeLista);\n\t}\n\t\n\tpublic String pegarNomeListaASerUsadaNoJogo()\n\t{\n\t\treturn this.acessaListasDePalavras.pegarNomeListaASerUsadaNoJogo();\n\t}\n\t\n\tpublic PalavrasETraducoes extrairPalavrasETraducoes(String listaOndeEstaoOsDados)\n\t{\n\t\treturn this.acessaPalavrasDeLista.extrairPalavrasETraducoes(listaOndeEstaoOsDados);\n\t}\n\t\n\tpublic boolean adicionarNovaPalavraNaLista(String nomeLista, String palavraNova, String traducaoNova)\n\t{\n\t\treturn this.acessaPalavrasDeLista.adicionarNovaPalavraNaLista(nomeLista, palavraNova, traducaoNova);\n\t}\n\t\n\tpublic void removerPalavraDaLista(String nomeDalista, String traducaoDaPalavraASerRemovida)\n\t{\n\t\tthis.acessaPalavrasDeLista.removerPalavraDaLista(nomeDalista, traducaoDaPalavraASerRemovida);\n\t}\n\t\n\tpublic void inserirJogadorRanking(String nomeJogador, int pontuacao)\n\t{\n\t\tthis.acessaRanking.inserirJogadorRanking(nomeJogador, pontuacao);\n\t}\n\t\n\tpublic String[] lerRanking()\n\t{\n\t\treturn this.acessaRanking.lerRanking();\n\t}\n\n\t\n\t\n\t\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,null,null,0,null,null,0,null,null,0,null,null,null,null,0,null,null,null,null,0,0,null,null,null,0,null,null,null,null,0,null,null,null,null,0,null,null,null,null,0,null,null,null,null,0,null,null,null,null,0,null,null,null,null,0,null,null,null,null,0,null,null,null,null,0,null,null,null,null,0,0,null,null,null,0,0,null,null,null,0,null,null,null,null,null,null,null,null],"name":"main/java/fachadaparadao/FachadaDAO.java"},{"source":"package main.java.jogo;\n\nimport java.util.LinkedList;\n\npublic class ChecaSeJogadorAcertouTraducao \n{\n\t//classe sao chamada quando a InterfaceJogo precisa saber quais bombas desativar\n\t\n\tprivate InterfaceBomba[] imagensBombas;\n\t\n\tpublic ChecaSeJogadorAcertouTraducao(InterfaceBomba[] imagensBombs)\n\t{\n\t\timagensBombas = imagensBombs;\n\t}\n\t\n\tpublic LinkedList<InterfaceBomba> quaisBombasDevemSerDesativadas(String palpiteJogador)\n\t{\n\t\t/*checa se o palpite do jogador eh igual a alguma traducao de uma das imagensBombas\n\t\t  e retorna somente quais bombas devem ser desativadas(jogador acertou a traducao)*/\n\t\t\n\t\tLinkedList<InterfaceBomba> bombasARemover = new LinkedList<InterfaceBomba>();\n\t\tpalpiteJogador = palpiteJogador.toLowerCase();\n\n\t\tfor(int i = 0; i < this.imagensBombas.length; i++)\n\t\t{\n\t\t\tboolean bombaAtivada = imagensBombas[i].getAtivada();\n\t\t\tString traducaoBomba = imagensBombas[i].getTraducao();\n\t\t\ttraducaoBomba = traducaoBomba.toLowerCase();\n\t\t\tif(bombaAtivada == true && palpiteJogador.compareTo(traducaoBomba) == 0)\n\t\t\t{\n\t\t\t\tbombasARemover.add(imagensBombas[i]);\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif(bombasARemover.size() == 0)//sem bombas\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn bombasARemover;\n\t\t}\n\t\t\n\t}\n\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,0,null,0,null,0,0,0,0,null,0,null,null,null,0,null,0,null,null,null,0,null,null,null,null,null,null],"name":"main/java/jogo/ChecaSeJogadorAcertouTraducao.java"},{"source":"package main.java.jogo;\n\nimport javax.swing.ImageIcon;\n\npublic class CriadorImageIcon//cria ImageIcons para usar nas interfaces do jogo \n{\n\tprotected static ImageIcon criarImageIcon(String endereco, String descricao) \n\t{\n\t\tjava.net.URL urlImagem = InterfaceJogo.class.getResource(endereco);\n\t\tif(urlImagem != null)\n\t\t{\n\t\t\treturn new ImageIcon(InterfaceJogo.class.getResource(endereco), descricao);\n\t\t}\n\t\t\n\t\telse\n\t\t{\n\t\t\tSystem.out.println(\"imagem nao encontrada:\" + endereco);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n","coverage":[null,null,null,null,0,null,null,null,0,0,null,0,null,null,null,null,0,0,null,null,null,null],"name":"main/java/jogo/CriadorImageIcon.java"},{"source":"package main.java.jogo;\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.util.LinkedList;\nimport java.util.NoSuchElementException;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\n\nimport main.java.command.CommandAdicionarPalavraNaLista;\nimport main.java.command.ConcreteCommandAdicionarPalavraNaLista;\n\n\n\n\n\npublic class InterfaceAdicionarPalavrasEmUmaLista implements ActionListener, KeyListener\n{\n\tprivate JFrame janelaEditarLista;\n\tprivate JTextField textFieldPalavra;\n\tprivate JTextField textFieldTraducao;\n\tprivate JButton salvar;\n\tprivate JButton botaoDesfazerAdicaoPalavra;\n\tprivate String nomeListaASerEditada;\n\tprivate JLabel labelFeedBackPalavraRegistrada;//label que mostra um feedback se a palavra conseguiu ser registrada\n\tprivate InterfaceListaPalavras mudarPalavrasDasListas;\n\t\n\tprivate LinkedList<CommandAdicionarPalavraNaLista> comandosAdicionarPalavraNaLista;\n\t\n\tpublic InterfaceAdicionarPalavrasEmUmaLista()\n\t{\n\t\tcomandosAdicionarPalavraNaLista = new LinkedList<CommandAdicionarPalavraNaLista>();\n\t}\n\n\tpublic void criarJanelaEditarLista(String nomeLista, InterfaceListaPalavras interfaceMuda)\n\t{\n\t\tmudarPalavrasDasListas = interfaceMuda;\n\t\tnomeListaASerEditada = nomeLista;\n\t\t\n\t\tjanelaEditarLista = new JFrame(\"Inserir palavras em uma lista\");\n\t\tjanelaEditarLista.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\t\t\n\t\t//setando limite maximo de um jtextfield\n\t\ttextFieldPalavra = new JTextField(\"\", 25);\n\t\tSetarLimiteMaximoTextField limiteMaximo = new SetarLimiteMaximoTextField();\n\t\tlimiteMaximo.setMaxChars(26);\n\t\ttextFieldPalavra.setDocument(limiteMaximo);\n\t\t\n\t\tJLabel labelPalavra = new JLabel(\"Palavra:\");\n\t\tlabelPalavra.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t\tlabelPalavra.setForeground(new Color(255, 201, 14));\n\t\tJPanel unePalavraETextField = new JPanel();\n\t\tunePalavraETextField.setBackground(new Color(112, 146, 190));\n\t\tunePalavraETextField.add(labelPalavra);\n\t\tunePalavraETextField.add(textFieldPalavra);\n\t\t\n\t\ttextFieldTraducao = new JTextField(\"\", 25);\n\t\tJLabel labelTraducao = new JLabel(\"Traducao:\");\n\t\tlabelTraducao.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t\tlabelTraducao.setForeground(new Color(255, 201, 14));\n\t\tJPanel uneTraducaoETextField = new JPanel();\n\t\tuneTraducaoETextField.setBackground(new Color(112, 146, 190));\n\t\tuneTraducaoETextField.add(labelTraducao);\n\t\tuneTraducaoETextField.add(textFieldTraducao);\n\t\t\n\t\t\n\t\tJLabel labelLista = new JLabel(\"Lista:\");\n\t\tlabelLista.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t\tlabelLista.setForeground(new Color(255, 201, 14));\n\t\tJLabel labelNomeLista = new JLabel(nomeLista);\n\t\tlabelNomeLista.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t\tlabelNomeLista.setForeground(Color.WHITE);\n\t\tJPanel uneLabelENomeLista = new JPanel();\n\t\tuneLabelENomeLista.setBackground(new Color(112, 146, 190));\n\t\tuneLabelENomeLista.add(labelLista);\n\t\tuneLabelENomeLista.add(labelNomeLista);\n\t\t\n\t\t\n\t\tJPanel uneTudo = new JPanel();\n\t\tuneTudo.setBackground(new Color(112, 146, 190));\n\t\tGridBagLayout layout = new GridBagLayout();\n\t\tuneTudo.setLayout(layout);\n\t\t\n\t\tGridBagConstraints grid = new GridBagConstraints();\n\t\t\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 0;\n\t\tgrid.gridheight = 1;\n\t\tuneTudo.add(uneLabelENomeLista, grid);\n\t\t\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 1;\n\t\tgrid.gridheight = 1;\n\t\t\n\t\tuneTudo.add(unePalavraETextField, grid);\n\t\t\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 2;\n\t\tgrid.gridheight = 1;\n\t\t\n\t\tuneTudo.add(uneTraducaoETextField, grid);\n\t\t\n\t\tsalvar = new JButton(\"salvar nova palavra\");\n\t\tsalvar.addActionListener(this);\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 3;\n\t\tgrid.gridheight = 1;\n\t\tuneTudo.add(salvar, grid);\n\t\t\n\t\tthis.botaoDesfazerAdicaoPalavra = new JButton(\"desfazer adicao de nova palavra\");\n\t\tbotaoDesfazerAdicaoPalavra.addActionListener(this);\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 4;\n\t\tgrid.gridheight = 1;\n\t\tuneTudo.add(botaoDesfazerAdicaoPalavra, grid);\n\t\t\n\t\t//o label com feedback caso a palavra seja salva\n\t\tlabelFeedBackPalavraRegistrada = new JLabel(\"______________\");\n\t\tlabelFeedBackPalavraRegistrada.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t\tlabelFeedBackPalavraRegistrada.setForeground(Color.WHITE);\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 5;\n\t\tgrid.gridheight = 1;\n\t\tuneTudo.add(labelFeedBackPalavraRegistrada, grid);\n\t\t\n\t\t\n\t\t//um texto, desta vez alertando que o usuario pode usar setas\n\t\tJLabel labelInformativa1 = new JLabel(\"voce pode transitar por este menu usando as setas do teclado\");\n\t\tlabelInformativa1.setFont(new Font(\"Serif\", Font.BOLD, 18));\n\t\tlabelInformativa1.setForeground(new Color(255, 201, 14));\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 6;\n\t\tgrid.gridheight = 1;\n\t\tuneTudo.add(labelInformativa1, grid);\n\t\t\n\t\t\n\t\t\n\t\tJLabel labelInformativa2 = new JLabel(\"caso voce ja informe uma palavra e uma traducao,\");\n\t\tlabelInformativa2.setFont(new Font(\"Serif\", Font.BOLD, 18));\n\t\tlabelInformativa2.setForeground(Color.WHITE);\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 7;\n\t\tgrid.gridheight = 1;\n\t\tuneTudo.add(labelInformativa2, grid);\n\t\t\n\t\tJLabel labelInformativa3 = new JLabel(\"basta clicar ENTER para salvar mais rapidamente\");\n\t\tlabelInformativa3.setFont(new Font(\"Serif\", Font.BOLD, 18));\n\t\tlabelInformativa3.setForeground(Color.WHITE);\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 8;\n\t\tgrid.gridheight = 1;\n\t\tuneTudo.add(labelInformativa3, grid);\n\t\t\n\t\t//adicionando listeners para os fields e botoes soh para o usuario transitar entre eles\n\t    textFieldPalavra.addKeyListener(this);\n\t    textFieldTraducao.addKeyListener(this);\n\t\tsalvar.addKeyListener(this);\n\t\t\n\t\tjanelaEditarLista.add(uneTudo);\n\t\tjanelaEditarLista.pack();\n\t\tjanelaEditarLista.setVisible(true);\n\t\t\n\t}\n\t\n\t@Override\n\tpublic void actionPerformed(ActionEvent arg0)\n\t{\n\t\tif(arg0.getSource() == this.salvar)\n\t\t{\n\t\t\tthis.adicionarPalavraNaLista();\n\t\t\t\n\t\t}\n\t\telse if(arg0.getSource() == this.botaoDesfazerAdicaoPalavra)\n\t\t{\n\t\t\tthis.desfazerAdicaoPalavraNaLista();\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void keyPressed(KeyEvent e)\n\t{\n\t\tint key = e.getKeyCode();\n        if(key == 40)\n        {\n        \t//se o usuario apertar a tecla da seta para baixo no teclado\n        \tif(textFieldPalavra.isFocusOwner() == true)\n        \t{\n        \t\tthis.textFieldTraducao.requestFocus();\n        \t}\n        \telse if(textFieldTraducao.isFocusOwner() == true)\n        \t{\n        \t\tthis.textFieldPalavra.requestFocus();\n        \t}\n        }\n        else if(key == 38)\n        {\n        \t//se o usuario apertar a tecla da seta para cima no teclado\n        \tif(textFieldPalavra.isFocusOwner() == true)\n        \t{\n        \t\tthis.textFieldTraducao.requestFocus();\n        \t}\n        \telse if(textFieldTraducao.isFocusOwner() == true)\n        \t{\n        \t\tthis.textFieldPalavra.requestFocus();\n        \t}\n        }\n        else if(key == KeyEvent.VK_ENTER)\n        {\n        \tthis.adicionarPalavraNaLista();\n        }\n\t}\n\t\n\n\t@Override\n\tpublic void keyReleased(KeyEvent arg0) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\n\t@Override\n\tpublic void keyTyped(KeyEvent arg0) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\t\n\tpublic void desfazerAdicaoPalavraNaLista()\n\t{\n\t\ttry\n\t\t{\n\t\t\tCommandAdicionarPalavraNaLista ultimoComandoAdicaoPalavra = this.comandosAdicionarPalavraNaLista.removeLast();\n\t\t\tultimoComandoAdicaoPalavra.desfazerAdicionarPalavraNaLista();\n\t\t\tlabelFeedBackPalavraRegistrada.setText(\"a palavra \" + ultimoComandoAdicaoPalavra.getPalavraAdicionar() + \" foi retirada com sucesso\");\n\t\t\t\n\t\t\t//vamos agora atualizar a listagem de palavras do jogo.\n\t\t\tString[] listaSemExtensaoTxt = nomeListaASerEditada.split(\".txt\");\n\t\t\tmudarPalavrasDasListas.mostrarPalavrasJogo(listaSemExtensaoTxt[0]);\n\t\t}\n\t\tcatch(NoSuchElementException exc)\n\t\t{\n\t\t\tJOptionPane.showMessageDialog(null, \"nenhuma palavra nova ja foi adicionada na lista\");\n\t\t}\n\t}\n\t\n\tprivate void adicionarPalavraNaLista()\n\t{\n\t\tString[] listaSemExtensaoTxt = nomeListaASerEditada.split(\".txt\"); //tira extensao .txt do nome da lista\n\t\t\n\t\tString novaPalavra = this.textFieldPalavra.getText();\n\t\tString novaTraducao = this.textFieldTraducao.getText();\n\t\t\n\t\tif(novaPalavra.compareTo(\"\") == 0 || novaTraducao.compareTo(\"\") == 0)\n\t\t{\n\t\t\tJOptionPane.showMessageDialog(null, \"precisa ser informado uma palavra e uma traducao\");\n\t\t}\n\t\telse if(palavraTemLetrasRomanas(novaPalavra) == true && novaPalavra.length() > 25)\n\t\t{\n\t\t\t//palavras com caracteres romanos deveriam ter no maximo 25 caracteres\n\t\t\tJOptionPane.showMessageDialog(null, \"para palavras com caracteres romanos, digite no maximo 25 caracteres\");\n\t\t}\n\t\telse if(palavraTemLetrasRomanas(novaPalavra) == false && novaPalavra.length() > 11)\n\t\t{\n\t\t\t//palavras com caracteres nao romanos(exemplo: kanjis no japones) deveriam ter no maximo 11 caracteres\n\t\t\tJOptionPane.showMessageDialog(null, \"para palavras com caracteres nao romanos, digite no maximo 11 caracteres\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tCommandAdicionarPalavraNaLista comandoAdicionarPalavra = \n\t\t\t\t\tnew ConcreteCommandAdicionarPalavraNaLista(novaPalavra, novaTraducao, listaSemExtensaoTxt[0]);\n\t    \tthis.comandosAdicionarPalavraNaLista.add(comandoAdicionarPalavra);\n\t\t\tboolean conseguiuAdicionar = comandoAdicionarPalavra.adicionarPalavraNaLista();\n\t\t\t\n\t\t\tif(conseguiuAdicionar == true)\n\t\t\t{\n\t\t\t\tlabelFeedBackPalavraRegistrada.setText(\"a palavra \" + this.textFieldPalavra.getText() + \" foi registrada com sucesso\");\n\t\t\t\tmudarPalavrasDasListas.mostrarPalavrasJogo(listaSemExtensaoTxt[0]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.textFieldPalavra.setText(\"\");\n\t\tthis.textFieldTraducao.setText(\"\");\n\t}\n\t\n\tprivate boolean palavraTemLetrasRomanas(String palavra)\n\t{\n\t\tString[] letrasPossiveis = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\",\n\t\t\t\t\t\t\t\t\t\"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n\t\tint percorredorPalavra = 0;\n\t\twhile(percorredorPalavra < palavra.length())\n\t\t{\n\t\t\tString caractere = String.valueOf(palavra.charAt(percorredorPalavra));\n\t\t\tfor(int j = 0; j < letrasPossiveis.length; j++)\n\t\t\t{\n\t\t\t\tif(caractere.compareTo(letrasPossiveis[j]) == 0)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpercorredorPalavra = percorredorPalavra + 1;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,0,0,null,0,0,null,null,0,0,0,0,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,null,null,0,0,0,0,0,0,0,0,0,0,null,null,0,0,0,0,null,0,null,0,0,0,0,null,0,0,0,null,0,null,0,0,0,null,0,null,0,0,0,0,0,0,null,0,0,0,0,0,0,null,null,0,0,0,0,0,0,0,null,null,null,0,0,0,0,0,0,0,null,null,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,null,null,0,0,0,null,0,0,0,0,0,0,null,null,null,0,0,0,0,null,0,0,0,0,0,0,null,null,null,0,0,0,null,0,0,0,0,0,0,0,0,null,0,0,null,0,0,0,0,0,0,0,0,null,0,0,0,0,0,0,null,null,null,null,null,0,0,null,null,null,null,0,0,null,null,null,null,0,0,0,0,null,0,0,0,0,0,0,0,0,0,null,null,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,0,null,0,0,null,null,0,0,0,0,0,0,0,0,0,0,null,null,0,0,0,0,null,null,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,0,0,null,null],"name":"main/java/jogo/InterfaceAdicionarPalavrasEmUmaLista.java"},{"source":"package main.java.jogo;\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\n\nimport javax.swing.ImageIcon;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\n\n\npublic class InterfaceBomba \n{\n\tprivate String palavra;\n\tprivate String traducao;\n\tprivate JLabel labelBomba;\n\tprivate JLabel labelPalavra;\n\tprivate JPanel uneBombaEPalavra;\n\tprivate boolean ativada;\n\t\n\t@SuppressWarnings(\"static-access\")\n\tpublic InterfaceBomba(String palav, String tradu)\n\t{\n\t\tativada = false;\n\t\tpalavra = palav;\n\t\ttraducao = tradu;\n\t    labelPalavra = new JLabel(palavra);\n\t    labelPalavra.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t    labelPalavra.setForeground(new Color(255, 201, 14));\n\t    ImageIcon imagemBomba = CriadorImageIcon.criarImageIcon(\"imagens/bomba.png\", \"uma bomba\");\n\t\tlabelBomba = new JLabel(imagemBomba);\n\t\t\n        uneBombaEPalavra = new JPanel();\n\t\tuneBombaEPalavra.setBackground(new Color(112, 146, 190));\n\t\tGridBagLayout layout = new GridBagLayout();\n\t\tuneBombaEPalavra .setLayout(layout);\n\t\t\n\t\tGridBagConstraints grid = new GridBagConstraints();\n\n\t\tuneBombaEPalavra.add(labelPalavra, grid);\n\t\t\n\t\tgrid.gridy = grid.PAGE_END;\n\t\tuneBombaEPalavra.add(labelBomba, grid);\n\t\t\n\t\tthis.ocultarBomba();\n\t\t\n\t}\n\tpublic JLabel getLabelBomba()\n\t{\n\t\treturn this.labelBomba;\n\t}\n\t\n\tpublic synchronized void ocultarBomba()\n\t{\n\t\tImageIcon bombaOculta = CriadorImageIcon.criarImageIcon(\"imagens/bombaOculta.png\", \"uma bomba oculta\");\n\t\tthis.labelBomba.setIcon(bombaOculta);\n\t\tthis.labelPalavra.setText(\"\");\n\t}\n\t\n\tpublic synchronized String getTraducao()\n\t{\n\t\treturn traducao;\n\t}\n\t\n\tpublic synchronized void setTraducao(String nova)\n\t{\n\t\tthis.traducao = nova;\n\t}\n\t\n\t\n\tpublic synchronized String getPalavra()\n\t{\n\t\treturn palavra;\n\t}\n\t\n\tpublic synchronized void setPalavra(String nova)\n\t{\n\t\tthis.palavra = nova;\n\t}\n\t\n\tpublic JPanel getUneBombaEPalavra()\n\t{\n\t\treturn this.uneBombaEPalavra;\n\t}\n\t\n\tpublic synchronized boolean getAtivada()\n\t{\n\t\treturn this.ativada;\n\t}\n\t\n\tpublic synchronized void setAtivada(boolean novo)\n\t{\n\t\tthis.ativada = novo;\n\t}\n\t\n\tpublic synchronized boolean ativarBomba(int tempoParaBombaExplodir)\n\t{\n\t\tboolean bombaAtiva = this.getAtivada();\n\t\tif(bombaAtiva == false)\n\t\t{\n\t\t\tthis.setAtivada(true);\n\t\t\tImageIcon imagemBombaAtivada = CriadorImageIcon.criarImageIcon(\"imagens/bomba\" + tempoParaBombaExplodir +\".gif\", \"bomba ativada\");\n\t\t\tthis.labelBomba.setIcon(imagemBombaAtivada);\n\t\t\tthis.labelPalavra.setText(getPalavra());\n\t\t\tlabelPalavra.setForeground(new Color(255, 201, 14));\n\t\t}\n\t\treturn bombaAtiva;\n\t}\n\t\n\t\n\t\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,null,0,0,0,0,null,0,null,0,null,0,0,null,0,null,0,null,null,0,null,null,null,null,0,0,0,0,null,null,null,0,null,null,null,0,0,0,null,null,null,0,0,null,null,null,0,0,0,null,null,0,0,null,null,null,0,0,null,null,null,0,0,0,null,null,0,0,0,0,0,0,0,0,0,0,0,null,null,null,null,null,null],"name":"main/java/jogo/InterfaceBomba.java"},{"source":"package main.java.jogo;\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.JButton;\nimport javax.swing.JComboBox;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\n\nimport main.java.fachadaparadao.FachadaDAO;\n\n\npublic class InterfaceEditarListasJogo implements ActionListener\n{\n\tprivate JFrame janelaEditaListas;\n\tprivate JButton criarNovaLista;\n\tprivate JButton removerLista;\n\tprivate JButton limparLista;\n\tprivate JButton editarPalavrasDasListas;\n\tprivate JComboBox comboBoxListasDoJogo;\n\t\n\tpublic InterfaceEditarListasJogo()\n\t{\n\t\t\n\t}\n\t\n\tpublic void criarInterfaceEditarListasJogo()\n\t{\n\t\tjanelaEditaListas = new JFrame(\"Editar listas de palavras do jogo\");\n\t\tjanelaEditaListas.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\t\tJPanel painelUneTudo = new JPanel();\n\t\tpainelUneTudo.setBackground(new Color(112, 146, 190));\n\t\tGridBagLayout layout = new GridBagLayout();\n\t\tpainelUneTudo.setLayout(layout);\n\t\t\n\t\tJLabel labelLista = new JLabel(\"Lista:\");\n\t\tlabelLista.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t\tlabelLista.setForeground(new Color(255, 201, 14));\n\t\tJPanel uneListaAssociadaEComboBox = new JPanel();\n\t\tuneListaAssociadaEComboBox.setBackground(new Color(112, 146, 190));\n\t\tuneListaAssociadaEComboBox.add(labelLista);\n\t\t\n\t\t\n\t\t\n\t\tString [] nomesDasListas = FachadaDAO.getFachadaDAO().extrairNomesDeTodasAsListasDePalavras();\n\t\tcomboBoxListasDoJogo = new JComboBox(nomesDasListas);\n\t\tcomboBoxListasDoJogo.addActionListener(this);\n\t\tuneListaAssociadaEComboBox.add(comboBoxListasDoJogo);\n\t\t\n\t\t\n\t\tGridBagConstraints grid = new GridBagConstraints();\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 0;\n\t\tgrid.gridheight = 1;\n\t\tpainelUneTudo.add(uneListaAssociadaEComboBox, grid);\n\t\t\n\t\t\n\t\t//criar botao criarLista\n\t\tcriarNovaLista = new JButton(\"criar nova lista de palavras\");\n\t\tcriarNovaLista.addActionListener(this);\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 1;\n\t\tgrid.gridheight = 1;\n\t\tgrid.insets = new Insets(20,0,0,0);//espaco entre botoes\n\t\t\n\t\tpainelUneTudo.add(criarNovaLista, grid);\n\t\t\n\t\t//criar botao removerLista\n\t\tremoverLista = new JButton(\"remover lista de palavras selecionada\");\n\t\tremoverLista.addActionListener(this);\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 2;\n\t\tgrid.gridheight = 1;\n\t\tgrid.insets = new Insets(20,0,0,0);//espaco entre botoes\n\t\tpainelUneTudo.add(removerLista, grid);\n\t\t\n\t\t\n\t\t//criar botao editarPalavras\n\t\teditarPalavrasDasListas = new JButton(\"adicionar/remover palavras em listas jï¿½ criadas\");\n\t\teditarPalavrasDasListas.addActionListener(this);\n\t\teditarPalavrasDasListas.setForeground(new Color(202, 0, 0));\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 3;\n\t\tgrid.gridheight = 1;\n\t\tgrid.insets = new Insets(20,0,0,0);//espaco entre botoes\n\t\tpainelUneTudo.add(editarPalavrasDasListas, grid);\n\t\t\n\t\t\n\t\t//criar botao limparLista\n\t\tlimparLista = new JButton(\"limpar lista de palavras selecionada\");\n\t\tlimparLista.addActionListener(this);\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 4;\n\t\tgrid.gridheight = 1;\n\t\tgrid.insets = new Insets(40,0,0,0);//espaco entre botoes\n\t\tpainelUneTudo.add(limparLista, grid);\n\t\t\n\t\tjanelaEditaListas.add(painelUneTudo);\n\t\tjanelaEditaListas.pack();\n\t\tjanelaEditaListas.setVisible(true);\n\t\t\n\t}\n\t\n\t\n\t\n\tpublic boolean criarNovaListaPalavras(String nomeLista)\n\t{\n\t\treturn FachadaDAO.getFachadaDAO().criarNovaListaPalavras(nomeLista);\n\t}\n\t\n\tpublic boolean removerListaPalavras(String nomeLista)\n\t{\n\t\treturn FachadaDAO.getFachadaDAO().removerListaPalavras(nomeLista);\n\t}\n\t\n\tpublic void limparListaPalavras(String nomeLista)\n\t{\n\t\tObject[] options = {\"Limpar\",\n        \"Nao Limpar\"};\n\t\tint escolha = JOptionPane.showOptionDialog(null,\n\t\t\t\t\"Limpar a lista vai apagar todas as palavras inclusas na lista. Tem certeza?\",\n\t\t\t\t\"Limpar lista\",\n\t\t\t\tJOptionPane.YES_NO_OPTION,\n\t\t\t\tJOptionPane.QUESTION_MESSAGE,\n\t\t\t\tnull,     //nao usa icone\n\t\t\t\toptions,  //titulos dos botoes\n\t\t\t\toptions[0]); //default button title\n\t\tif(escolha == JOptionPane.YES_OPTION)\n\t\t{\n\t\t\tboolean limpouLista = FachadaDAO.getFachadaDAO().limparListaPalavras(nomeLista);\n\t\t\tif(limpouLista == true)\n\t\t\t{\n\t\t\t\tJOptionPane.showMessageDialog(null, \"lista limpa:\" + nomeLista);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t\n\t\t\t\tJOptionPane.showMessageDialog(null, \"nao foi possivel limpar essa lista:\" + nomeLista);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\t\n\t\n\t\n\t\n\tpublic void adicionarNovaListaNaComboBox(String novaLista)\n\t{\n\t\tString[] palavrasDaNovaComboBox = new String[comboBoxListasDoJogo.getItemCount() + 1];\n\t\t//esse arranjo contem as palavras atuais da combo box e terah  novaLista tambem \n\t\tfor(int i = 0; i < comboBoxListasDoJogo.getItemCount(); i++)\n\t\t{\n\t\t\tpalavrasDaNovaComboBox[i] = (String) comboBoxListasDoJogo.getItemAt(i);\n\t\t}\n\t\tpalavrasDaNovaComboBox[comboBoxListasDoJogo.getItemCount()] = novaLista;\n\t\t\n\t\tString[] palavrasOrdenadasDaNovaComboBox = ordenarPalavrasLista(palavrasDaNovaComboBox);\n\t\tcomboBoxListasDoJogo.removeAllItems();\n\t\t\n\t\tfor(int j = 0; j < palavrasOrdenadasDaNovaComboBox.length; j++)\n\t\t{\n\t\t\tcomboBoxListasDoJogo.addItem(palavrasOrdenadasDaNovaComboBox[j]);\n\t\t}\n\t}\n\t\n\tpublic void removerListaDaComboBox(String lista)\n\t{\n\t\tString[] palavrasDaNovaComboBox = new String[comboBoxListasDoJogo.getItemCount() - 1];\n\t\t//esse arranjo contem as palavras atuais da combo box e nÃ£o terÃ¡ o nome em lista \n\t\tint percorredorPalavrasDanovaComboBox = 0;\n\t\t\n\t\tfor(int i = 0; i < comboBoxListasDoJogo.getItemCount(); i++)\n\t\t{\n\t\t\tString itemCombo = (String) comboBoxListasDoJogo.getItemAt(i);\n\t\t\tif(itemCombo.compareTo(lista) != 0)\n\t\t\t{\n\t\t\t\tpalavrasDaNovaComboBox[percorredorPalavrasDanovaComboBox] =\n\t\t\t\t\t\t(String) comboBoxListasDoJogo.getItemAt(i);\n\t\t\t\tpercorredorPalavrasDanovaComboBox = percorredorPalavrasDanovaComboBox + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tString[] palavrasOrdenadasDaNovaComboBox = ordenarPalavrasLista(palavrasDaNovaComboBox);\n\t\tcomboBoxListasDoJogo.removeAllItems();\n\t\t\n\t\tfor(int j = 0; j < palavrasOrdenadasDaNovaComboBox.length; j++)\n\t\t{\n\t\t\tcomboBoxListasDoJogo.addItem(palavrasOrdenadasDaNovaComboBox[j]);\n\t\t}\n\t\t\n\t}\n\t\n\tpublic String [] ordenarPalavrasLista(String [] palavras)\n\t{\n\t\tint percorredor = 0;\n\t\tString auxiliarTroca;//auxiliar para trocas na ordenacÃ£o das palavras.\n\t\twhile(percorredor < palavras.length)\n\t\t{\n\t\t\tfor(int i = percorredor + 1; i < palavras.length; i++)\n\t\t\t{\n\t\t\t\t//if abaixo compara duas palavras do arranjo pra ver se a da esquerda \n\t\t\t\t//vem antes da palavra na direita\n\t\t\t\tif(palavras[i].compareTo(palavras[percorredor]) < 0)\n\t\t\t\t{\n\t\t\t\t\tauxiliarTroca = palavras[i];\n\t\t\t\t\tpalavras[i] = palavras[percorredor];\n\t\t\t\t\tpalavras[percorredor] = auxiliarTroca;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpercorredor = percorredor + 1;\n\t\t}\n\t\treturn palavras;\n\t}\n\t\n\t\n\t@Override\n\tpublic void actionPerformed(ActionEvent arg0)\n\t{\n\t\t\n\t\tif(arg0.getSource() == this.criarNovaLista)\n\t\t{\n\t\t\tString nomeNovaLista = \n\t\t\t\t\tJOptionPane.showInputDialog(\"Qual o nome da nova lista? Nao precisa de .txt\", \"listaQualquer\");\n\t\t\tif(nomeNovaLista != null)\n\t\t\t{\n\t\t\t\tif(nomeNovaLista.compareTo(\"\") != 0)\n\t\t\t\t{\n\t\t\t\t\tboolean criouNovaListaPalavras = criarNovaListaPalavras(nomeNovaLista);\n\t\t\t\t\t\n\t\t\t\t\tif(criouNovaListaPalavras == true)\n\t\t\t\t\t{\n\t\t\t\t\t\tadicionarNovaListaNaComboBox(nomeNovaLista + \".txt\");\n\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"lista criada com sucesso:\" + nomeNovaLista);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"lamento, mas a lista nao pode ser criada:\" + nomeNovaLista);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tJOptionPane.showMessageDialog(null, \"digite um nome para a lista\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(arg0.getSource() == this.removerLista)\n\t\t{\n\t\t\tString nomeListaASerRemovida = (String) this.comboBoxListasDoJogo.getSelectedItem();\n    \t\t\n\t\t\tif(nomeListaASerRemovida != null)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tString[] tiraTxt = nomeListaASerRemovida.split(\".txt\"); //tirar a extensao \".txt do nome da lista\"\n\t\t\t\tboolean removeuLista = removerListaPalavras(tiraTxt[0]);\n\t\t\t\tif(removeuLista == true)\n\t\t\t\t{\n\t\t\t\t\tJOptionPane.showMessageDialog(null, \"lista removida com sucesso:\" + tiraTxt[0]);\n\t\t\t\t\tremoverListaDaComboBox(nomeListaASerRemovida);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(tiraTxt[0].compareTo(\"palavras\") == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"voce nao pode deletar esta lista: palavras\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tJOptionPane.showMessageDialog(null, \"lamento, mas a lista nao existe:\" + tiraTxt[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\telse if(arg0.getSource() == this.limparLista)\n\t\t{\n\t\t\tString nomeListaASerLimpa = (String) this.comboBoxListasDoJogo.getSelectedItem();\n    \t\t\n\t\t\tif(nomeListaASerLimpa != null)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tString[] tiraTxt = nomeListaASerLimpa.split(\".txt\"); //tirar a extensao \".txt do nome da lista\"\n\t\t\t\tlimparListaPalavras(tiraTxt[0]);\n\t\t\t}\n\t\t}\n\t\telse if(arg0.getSource() == this.editarPalavrasDasListas)\n\t\t{\n\t\t\tInterfaceListaPalavras mudarPalavrasDasListas = new InterfaceListaPalavras();\n\t\t\tmudarPalavrasDasListas.criarInterfaceListaPalavras();\n\t\t}\n\t}\n\t\n\n\t\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,null,null,0,0,0,0,0,0,null,0,0,0,0,0,0,null,null,null,0,0,0,0,null,null,0,0,0,0,0,null,null,null,0,0,0,0,0,0,null,0,null,null,0,0,0,0,0,0,0,null,null,null,0,0,0,0,0,0,0,0,null,null,null,0,0,0,0,0,0,0,null,0,0,0,null,0,null,null,null,null,null,0,null,null,null,null,0,null,null,null,null,0,null,0,null,null,null,null,null,null,null,0,null,0,0,null,0,null,null,null,null,0,null,null,null,0,null,null,null,null,null,null,null,0,null,0,null,0,null,0,null,0,0,null,0,null,0,null,0,null,null,null,0,null,0,null,0,null,0,0,null,0,null,0,null,null,null,0,0,null,0,null,0,null,null,0,null,null,null,0,null,0,null,0,null,null,null,0,null,0,0,0,null,null,0,null,0,null,null,null,null,null,null,null,0,null,0,null,0,null,0,null,0,null,0,null,0,0,null,null,null,0,null,0,null,null,0,null,null,0,0,null,0,null,0,null,null,0,0,0,null,0,0,null,null,null,0,null,0,null,null,null,0,null,null,null,0,null,0,null,0,null,0,null,null,0,0,null,0,0,null,0,0,null,0,null,null,null,null,null],"name":"main/java/jogo/InterfaceEditarListasJogo.java"},{"source":"package main.java.jogo;\n\n\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.awt.Font;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.GridLayout;\nimport java.awt.Toolkit;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.util.LinkedList;\nimport java.util.Random;\n\nimport javax.swing.BorderFactory;\nimport javax.swing.ImageIcon;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\nimport javax.swing.border.TitledBorder;\n\nimport main.java.fachadaparadao.FachadaDAO;\n\n\npublic class InterfaceJogo implements KeyListener\n{\n\tprivate static InterfaceJogo singletonInterfaceJogo;\n\tprivate JTextField campoPreencher;\n\tprivate JFrame telaJogo;\n\tprivate JLabel [] coracoesJogador;\n\tprivate  JLabel pontuacao;\n\tprivate InterfaceBomba [] imagensBombas;\n\tprivate String modoJogo;\n\tprivate int numPalavrasNoJogo;\n\tprivate PalavrasETraducoes palavrasETraducoesDoJogo;\n\tprivate JLabel[] labelsPalavrasNaoAcertadas;\n\tprivate JLabel[] labelsTraducoesPalavrasNaoAcertadas;\n\tprivate int quantasBombasJaExplodiram; //ï¿½til para alterar a tabela que mostra as palavras erradas por um jogador\n\tprivate volatile boolean jogoAcabou; //booleano alterado quando jframe ï¿½ disposed()\n\t\n\t\n\tprivate  InterfaceJogo()\n\t{\n\t\tmodoJogo = \"nenhum\";\n\t\timagensBombas = new InterfaceBomba[20];\n\t\tString nomeListaTemPalavrasASeremUsadasNoJogo = FachadaDAO.getFachadaDAO().pegarNomeListaASerUsadaNoJogo();\n\t\tthis.palavrasETraducoesDoJogo = FachadaDAO.getFachadaDAO().extrairPalavrasETraducoes(nomeListaTemPalavrasASeremUsadasNoJogo);\n\t\tnumPalavrasNoJogo = this.palavrasETraducoesDoJogo.getNumPalavrasNoJogo();\n\t\t\n\t\tlabelsPalavrasNaoAcertadas = new JLabel[5];\n\t\tlabelsTraducoesPalavrasNaoAcertadas = new JLabel[5];\n\t\tfor(int i = 0; i < 5; i++)\n\t\t{\n\t\t\tlabelsPalavrasNaoAcertadas[i] = new JLabel(\"\");\n\t\t\tlabelsPalavrasNaoAcertadas[i].setFont(new Font(\"Serif\", Font.BOLD, 18));\n\t\t\tlabelsPalavrasNaoAcertadas[i].setForeground(Color.WHITE);\n\t\t\tlabelsTraducoesPalavrasNaoAcertadas[i] = new JLabel(\"\");\n\t\t\tlabelsTraducoesPalavrasNaoAcertadas[i].setFont(new Font(\"Serif\", Font.BOLD, 16));\n\t\t\tlabelsTraducoesPalavrasNaoAcertadas[i].setForeground(Color.WHITE);\n\t\t\t\n\t\t}\n\t\tquantasBombasJaExplodiram = 0;\n\t\t\n\t\tthis.jogoAcabou = false;\n\t}\n\t\n\t\n\t\n\tpublic static synchronized InterfaceJogo getInterfaceJogo()\n\t{\n\t\tif(singletonInterfaceJogo == null)\n\t\t{\n\t\t\tsingletonInterfaceJogo = new InterfaceJogo();\n\t\t}\n\t\treturn singletonInterfaceJogo;\n\t}\n\t\n\t\n\tpublic PalavrasETraducoes getPalavrasETraducoesDoJogo()\n\t{\n\t\treturn palavrasETraducoesDoJogo;\n\t}\n\t\n\tpublic int getNumPalavrasNoJogo()\n\t{\n\t\treturn this.numPalavrasNoJogo;\n\t}\n\t\n\tpublic synchronized void setModo(String novoModo)\n\t{\n\t\tmodoJogo = novoModo;\n\t}\n\t\n\tpublic String getModo()\n\t{\n\t\treturn modoJogo;\n\t}\n\t\n\tpublic synchronized InterfaceBomba getBomba(int numeroBomba)\n\t{\n\t\treturn imagensBombas[numeroBomba];\n\t}\n\t\n\tpublic synchronized boolean getJogoAcabou() \n\t{\n\t\treturn jogoAcabou;\n\t}\n\t\n\t\n\tpublic void reduzirCoracao(Jogador jogador)\n\t{\n\t\tImageIcon coracaoPerdido = CriadorImageIcon.criarImageIcon(\"imagens/heartbreak.png\", \n\t\t\t\t\t\t\t\t\t\t\t\t   \"coracao perdido do jogador\");\n\t\tint pontosVida = jogador.getPontosVida();\n\t\t\n\t\tthis.coracoesJogador[pontosVida].setIcon(coracaoPerdido);\n\t}\n\t\n\tpublic void incrementarPlacar(int pontosNovos)\n\t{\n\t\tpontuacao.setText(String.valueOf(pontosNovos));\n\t}\n\t\n\t\n\tpublic JPanel criarCoracoesJogador1()\n\t{\n\t\tImageIcon coracaoCheio = CriadorImageIcon.criarImageIcon(\"imagens/heart.png\", \"ponto de vida cheio\");\n\t\t\n\t\t//criando panels para as vidas dos jogadores\n\t\tJLabel labelCoracao1 = new JLabel(coracaoCheio);\n\t\tJLabel labelCoracao2 = new JLabel(coracaoCheio);\n\t\tJLabel labelCoracao3 = new JLabel(coracaoCheio);\n\t\tJLabel labelCoracao4 = new JLabel(coracaoCheio);\n\t\tJLabel labelCoracao5 = new JLabel(coracaoCheio);\n\t\t\n\t\t//adicionando as labels no array de JLabels\n\t\tcoracoesJogador = new JLabel[5];\n\t\tcoracoesJogador[0] = labelCoracao1;\n\t\tcoracoesJogador[1] = labelCoracao2;\n\t\tcoracoesJogador[2] = labelCoracao3;\n\t\tcoracoesJogador[3] = labelCoracao4;\n\t\tcoracoesJogador[4] = labelCoracao5;\n\t\t//Criar uma label para dizer que as vidas sï¿½o do jogador\n\t\tJLabel vidas = new JLabel(\"Vidas:\");\n\t\tvidas.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t\tvidas.setForeground(new Color(255, 201, 14));\n\t\t\n\t\t//criando um container para abrigar os coracoes e a label vidas\n\t\tJPanel painelCoracoes = new JPanel();\n\t\t\n\t\tpainelCoracoes.add(vidas);\n\t\tpainelCoracoes.add(labelCoracao1);\n\t\tpainelCoracoes.add(labelCoracao2);\n\t\tpainelCoracoes.add(labelCoracao3);\n\t\tpainelCoracoes.add(labelCoracao4);\n\t\tpainelCoracoes.add(labelCoracao5);\n\n\t\tpainelCoracoes.setBackground(new Color(112, 146, 190));\n\t\t\n\t\treturn painelCoracoes;\n\t}\n\t\n\tpublic JPanel criarPontuacao()\n\t{\n\t\tJLabel frasePontuacao = new JLabel(\"Pontuacao:\");\n\t\tfrasePontuacao.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t\tfrasePontuacao.setForeground(new Color(255, 201, 14));\n\t\t\n\t\tJPanel painelPontuacao = new JPanel();\n\t\tpainelPontuacao.setBackground(new Color(112, 146, 190));\n\t\tpainelPontuacao.add(frasePontuacao);\n\t\t\n\t\tpontuacao = new JLabel(\"0\");\n\t\t\n\t\tpontuacao.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t\tpontuacao.setForeground(new Color(255, 201, 14));\n\t\tpainelPontuacao.add(pontuacao);\n\t\t\n\t\treturn painelPontuacao;\n\t}\n\n\t\n\t//o metodo abaixo serve pro jogador adivinhar a palavra que vai desativar uma bomba.\n\tpublic JPanel criarCampoDigitarPalavras()\n\t{\n\t\tJPanel painelCampo = new JPanel();\n\t\tpainelCampo.setBackground(new Color(112, 146, 190));\n\t\tcampoPreencher = new JTextField(70);\n\t\tpainelCampo.add(campoPreencher);\n\t\tcampoPreencher.addKeyListener(this);\n\t\treturn painelCampo;\n\t}\n\t\n\tpublic JPanel criarCampoBombas()\n\t{\n\t\tRandom geraAleatorio = new Random();\n\t\tJPanel campoBombas = new JPanel(new GridLayout(5, 4));\n\t\tcampoBombas.setBackground(new Color(255, 201, 14));\n\t\t\n\t\tfor(int i = 0; i < 20; i++)\n\t\t{\n\t\t\tint numeroAleatorio = geraAleatorio.nextInt(numPalavrasNoJogo);\n\t\t\tString palavraBomba = this.palavrasETraducoesDoJogo.getPalavra(numeroAleatorio);\n\t\t\tString traducaoBomba = this.palavrasETraducoesDoJogo.getTraducao(numeroAleatorio);\n\t\t\tInterfaceBomba bomba = new InterfaceBomba(palavraBomba, traducaoBomba);\n\t\t\tthis.imagensBombas[i] = bomba;\n\t\t\tcampoBombas.add(bomba.getUneBombaEPalavra());\n\t\t}\n\t\treturn campoBombas;\n\t}\n\t\n\tpublic synchronized void criarInterfaceJogo()\n\t{\n\t\ttelaJogo = new JFrame();\n\t\ttelaJogo.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\ttelaJogo.setTitle(\"Bomb Words\");\n\t\tDimension d = Toolkit.getDefaultToolkit().getScreenSize();  \n\t\ttelaJogo.setSize(d);  \n\t\ttelaJogo.setResizable(false);  \n\t\tJPanel campoBombas = this.criarCampoBombas();\n\t\tJPanel campoCoracoes = this.criarCoracoesJogador1();\n\t\tJPanel campoPlacar = this.criarPontuacao();\n\t\tJPanel campoDigitar = this.criarCampoDigitarPalavras();\n\t\tJPanel campoPalavrasNaoAcertadas = this.criarPainelComPalavrasNaoAcertadas();\n\t\t//criando o panel que vai juntar tudo\n\t\tJPanel painelJogo = new JPanel();\n\t\tpainelJogo.setBackground(new Color(112, 146, 190));\n\t\tpainelJogo.setSize(1000, 1000);\n\t\tGridBagLayout layoutFundo = new GridBagLayout();\n\t\tpainelJogo.setLayout(layoutFundo);\n\t\tGridBagConstraints g = new GridBagConstraints();\n\t\t\n\t\tg.gridwidth =  3;//tres colunas\n\t\tg.gridheight = 1;\n\t\tg.gridx = 0;\n\t\tg.gridy = 0;\n\t\tpainelJogo.add(campoCoracoes, g);\n\t\tg.gridwidth =  3;\n\t\tg.gridheight = 1;\n\t\tg.gridx = 0;\n\t\tg.gridy = 1;//linha\n\t\tpainelJogo.add(campoPlacar, g);\n\t\tg.gridwidth =  3;\n\t\tg.gridheight = 1;\n\t\tg.gridx = 0;\n\t\tg.gridy = 2;\n\t\tpainelJogo.add(campoDigitar, g);\n\t\t\n\t\t\n\t\tg.gridwidth =  2;\n\t\tg.gridheight = 5;\n\t\tg.weightx = 0.8;//espaco extra\n\t\tg.weighty = 0.8;\n\t\tg.gridx = 0;\n\t\tg.gridy = 3;\n\t\tg.anchor = GridBagConstraints.SOUTH;\n\t\tpainelJogo.add(campoBombas, g);\n\t\t\n\t\tg.gridwidth =  1;\n\t\tg.gridheight = 5;\n\t\tg.weightx = 0.8;//espaco extra\n\t\tg.weighty = 0.8;\n\t\tg.gridx = 2;\n\t\tg.gridy = 3;\n\t\tg.anchor = GridBagConstraints.EAST;\n\t\tpainelJogo.add(campoPalavrasNaoAcertadas, g);\n\t\t\n\t\ttelaJogo.add(painelJogo);\n\t\ttelaJogo.setVisible(true);\n\t\t\n\t\t\n\t}\n\t\n\t@Override\n\tpublic void keyPressed(KeyEvent e) \n\t{\n\t\t int key = e.getKeyCode();\n         if (key == KeyEvent.VK_ENTER) \n         {\n            String digitadaPeloUsuario = campoPreencher.getText();\n            synchronized(this)\n            {\n            \t\n            }\n            if(digitadaPeloUsuario != null)\n            {\n            \tChecaSeJogadorAcertouTraducao checaPalpiteJogador = new ChecaSeJogadorAcertouTraducao(imagensBombas);\n            \t LinkedList<InterfaceBomba> bombasDesativar = \n            \t\t\t checaPalpiteJogador.quaisBombasDevemSerDesativadas(digitadaPeloUsuario);\n                 if(bombasDesativar != null)\n                 {\n                \tfor(int i = 0; i < bombasDesativar.size(); i++)\n                \t{\n                \t\tbombasDesativar.get(i).setAtivada(false);\n                \t}\n                \t\n                 \tthis.modoJogo = \"desativarBomba\";\n                 }\n                 campoPreencher.setText(\"\");   \n            }\n         }\n\t\t\n\t}\n\n\n\t@Override\n\tpublic void keyReleased(KeyEvent e) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\n\t@Override\n\tpublic void keyTyped(KeyEvent e) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\t\n\t\n\t\n\tpublic JPanel criarPainelComPalavrasNaoAcertadas()\n\t{\n\t\tGridBagConstraints grid = new GridBagConstraints();\n\t\tJPanel painelComPalavrasNaoAcertadas = new JPanel();\n\t\tDimension d = new Dimension(300,440);\n\t\tpainelComPalavrasNaoAcertadas.setPreferredSize(d);\n\n\t\tTitledBorder titulo = BorderFactory.createTitledBorder(\"Palavras das bombas que explodiram\");\n\t\ttitulo.setTitleColor(Color.WHITE);\n\n\t\tpainelComPalavrasNaoAcertadas.setBorder(titulo);\n\t\t\n\t\t\n\t\tpainelComPalavrasNaoAcertadas.setBackground(new Color(112, 146, 190));\n\t\tGridBagLayout layout = new GridBagLayout();\n\t\tpainelComPalavrasNaoAcertadas.setLayout(layout);\n\t\t\n\t\tint percorredorGridY = 0;\n\t\tfor(int i = 0; i < 5; i++)\n\t\t{\n\t\t\tJPanel painelLinha = new JPanel();\n\t\t\tpainelLinha.setBackground(new Color(112, 146, 190));\n\t\t\tpainelLinha.add(this.labelsPalavrasNaoAcertadas[i]);\n\t\t\t\n\t\t\tgrid.gridx = 0;\n\t\t\tgrid.gridy = percorredorGridY;\n\t\t\tgrid.gridheight = 1;\n\t\t\tpainelComPalavrasNaoAcertadas.add(painelLinha, grid);\n\t\t\t\n\t\t\tpercorredorGridY = percorredorGridY + 1;\n\t\t\t\n\t\t\t//falta colocar a traducao associada\n\t\t\tJPanel painelLinha2 = new JPanel();\n\t\t\tpainelLinha2.setBackground(new Color(112, 146, 190));\n\t\t\tpainelLinha2.add(this.labelsTraducoesPalavrasNaoAcertadas[i]);\n\t\t\t\n\t\t\tgrid.gridx = 0;\n\t\t\tgrid.gridy = percorredorGridY;\n\t\t\tgrid.gridheight = 1;\n\t\t\tpainelComPalavrasNaoAcertadas.add(painelLinha2, grid);\n\t\t\t\n\t\t\tpercorredorGridY = percorredorGridY + 1;\n\t\t\t\n\t\t\t//agora uma linha em branco\n\t\t\tJLabel linhaBranca = new JLabel(\"\");\n\t\t\tJPanel painelBranco = new JPanel();\n\t\t\tpainelBranco.setBackground(new Color(112, 146, 190));\n\t\t\tpainelBranco.add(linhaBranca);\n\t\t\tgrid.gridx = 0;\n\t\t\tgrid.gridy = percorredorGridY;\n\t\t\tgrid.gridheight = 1;\n\t\t\tpainelComPalavrasNaoAcertadas.add(painelBranco, grid);\n\t\t\tpercorredorGridY = percorredorGridY + 1;\n\t\t}\n\n\t\treturn painelComPalavrasNaoAcertadas;\n\t}\n\t\n\tpublic synchronized void inserirPalavraETraducaoDaBombaQueExplodiu(InterfaceBomba interBomba)\n\t{\n\t\tthis.labelsPalavrasNaoAcertadas[quantasBombasJaExplodiram].setText(\"Palavra : \" + interBomba.getPalavra());\n\t\tthis.labelsTraducoesPalavrasNaoAcertadas[quantasBombasJaExplodiram].setText(\"Traducao : \" + interBomba.getTraducao());\n\t\tquantasBombasJaExplodiram = quantasBombasJaExplodiram + 1;\n\t}\n\t\n\tpublic void disposeTelaJogo()\n\t{\n\t\tthis.jogoAcabou = true;\n\t\tthis.telaJogo.dispose();\n\t}\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,null,0,0,0,0,0,0,null,null,0,null,0,0,null,null,null,null,null,0,null,0,null,0,null,null,null,null,null,0,null,null,null,null,0,null,null,null,null,0,0,null,null,null,0,null,null,null,null,0,null,null,null,null,0,null,null,null,null,null,0,null,0,null,0,0,null,null,null,0,0,null,null,null,null,0,null,null,0,0,0,0,0,null,null,0,0,0,0,0,0,null,0,0,0,null,null,0,null,0,0,0,0,0,0,null,0,null,0,null,null,null,null,0,0,0,null,0,0,0,null,0,null,0,0,0,null,0,null,null,null,null,null,null,0,0,0,0,0,0,null,null,null,null,0,0,0,null,0,null,0,0,0,0,0,0,null,0,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,null,0,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,null,0,0,null,null,0,null,null,null,null,0,0,null,0,0,null,null,0,0,null,0,0,null,0,null,0,null,0,null,null,0,null,0,null,null,null,0,null,null,null,null,null,null,0,null,null,null,null,null,0,null,null,null,null,null,0,0,0,0,null,0,0,null,0,null,null,0,0,0,null,0,0,null,0,0,0,null,0,0,0,0,null,0,null,null,0,0,0,null,0,0,0,0,null,0,null,null,0,0,0,0,0,0,0,0,0,null,null,0,null,null,null,null,0,0,0,0,null,null,null,0,0,0,null,null],"name":"main/java/jogo/InterfaceJogo.java"},{"source":"package main.java.jogo;\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\n\nimport main.java.fachadaparadao.FachadaDAO;\n\n\npublic class InterfaceJuntarListas implements ActionListener, KeyListener\n{\n\tprivate JFrame telaJuntarListas;\n\tprivate JTextField textFieldLista1;\n\tprivate JTextField textFieldLista2;\n\tprivate JButton juntarListas;\n\t\n\tpublic InterfaceJuntarListas()\n\t{\n\t\ttelaJuntarListas = new JFrame(\"juntar listas de palavras\");\n\t\ttelaJuntarListas.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\t\ttelaJuntarListas.setTitle(\"juntar duas listas\");\n\t}\n\t\n\tpublic void criarInterfaceJuntarListas()\n\t{\n\t\tJPanel uneTudo = new JPanel();\n\t\tuneTudo.setBackground(new Color(112, 146, 190));\n\t\tGridBagLayout layout = new GridBagLayout();\n\t\tuneTudo.setLayout(layout);\n\t\tGridBagConstraints grid = new GridBagConstraints();\n\t\t\n\t\t\n\t\t//criar titulo\n\t\tJLabel titulo = new JLabel(\"Juntar listas\");\n\t\ttitulo.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t\ttitulo.setForeground(new Color(255, 201, 14));\n\t\tJPanel painelTitulo = new JPanel();\n\t\tpainelTitulo.add(titulo);\n\t\tpainelTitulo.setBackground(new Color(112, 146, 190));\n\t\tpainelTitulo.add(titulo);\n\t\t\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 0;\n\t\tgrid.gridheight = 1;\n\t\tuneTudo.add(painelTitulo, grid);\n\t\t\n\t\t\n\t\t//criar a label e o textfield lista1\n\t\ttextFieldLista1 = new JTextField(\"\", 25);\n\t\ttextFieldLista1.addKeyListener(this);\n\t\tJLabel labelLista1 = new JLabel(\"Lista1:\");\n\t\tlabelLista1.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t\tlabelLista1.setForeground(new Color(255, 201, 14));\n\t\tJPanel uneLista1ETextField = new JPanel();\n\t\tuneLista1ETextField.setBackground(new Color(112, 146, 190));\n\t\tuneLista1ETextField.add(labelLista1);\n\t\tuneLista1ETextField.add(textFieldLista1);\n\t\t\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 1;\n\t\tgrid.gridheight = 1;\n\t\tuneTudo.add(uneLista1ETextField, grid);\n\t\t\n\t\t\n\t\t//criar a label e o textfield lista2\n\t\ttextFieldLista2 = new JTextField(\"\", 25);\n\t\ttextFieldLista2.addKeyListener(this);\n\t\tJLabel labelLista2 = new JLabel(\"Lista2:\");\n\t\tlabelLista2.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t\tlabelLista2.setForeground(new Color(255, 201, 14));\n\t\tJPanel uneLista2ETextField = new JPanel();\n\t\tuneLista2ETextField.setBackground(new Color(112, 146, 190));\n\t\tuneLista2ETextField.add(labelLista2);\n\t\tuneLista2ETextField.add(textFieldLista2);\n\t\t\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 2;\n\t\tgrid.gridheight = 1;\n\t\tuneTudo.add(uneLista2ETextField, grid);\n\t\t\n\t\t\n\t\t//agora o botÃ£o para juntar listas\n\t\tjuntarListas = new JButton(\"juntar listas\");\n\t\tjuntarListas.addKeyListener(this);\n\t\tjuntarListas.addActionListener(this);\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 3;\n\t\tgrid.gridheight = 1;\n\t\tuneTudo.add(juntarListas, grid);\n\t\t\n\t\t//agora uma breve informacao sobre qual lista junta com qual\n\t\tJLabel informacao = new JLabel(\"obs: ao juntar as listas, a lista1 tera suas palavras antigas + as palavras da lista2\");\n\t\tinformacao.setFont(new Font(\"Serif\", Font.BOLD, 20));\n\t\tinformacao.setForeground(new Color(255, 201, 14));\n\t\tJPanel painelInformacao = new JPanel();\n\t\tpainelInformacao.setBackground(new Color(112, 146, 190));\n\t\tpainelInformacao.add(informacao);\n\t\t\n\t\tgrid.gridx = 0;\n\t\tgrid.gridy = 4;\n\t\tgrid.gridheight = 1;\n\t\tuneTudo.add(painelInformacao, grid);\n\t\t\n\t\t\n\t\ttelaJuntarListas.add(uneTudo);\n\t\ttelaJuntarListas.pack();\n\t\ttelaJuntarListas.setVisible(true);\n\t}\n\t\n\n\t@Override\n\tpublic void actionPerformed(ActionEvent arg0) \n\t{\n\t\tif(arg0.getSource() == juntarListas)\n\t\t{\n\t\t\tthis.juntarListas();\n\t\t}\n\t\t\n\t}\n\t\n\tpublic void juntarListas()\n\t{\n\t\tString lista1 = textFieldLista1.getText();\n\t\tString lista2 = textFieldLista2.getText();\n\t\t\n\t\tif(lista1.compareTo(\"\") == 0 || lista2.compareTo(\"\") == 0)\n\t\t{\n\t\t\tJOptionPane.showMessageDialog(null, \"informe duas listas\");\n\t\t}\n\t\telse if(FachadaDAO.getFachadaDAO().listaDePalavrasJahExiste(lista1) == false)\n\t\t{\n\t\t\tJOptionPane.showMessageDialog(null, \"a lista1 nao existe\");\n\t\t}\n\t\telse if(FachadaDAO.getFachadaDAO().listaDePalavrasJahExiste(lista2) == false)\n\t\t{\n\t\t\tJOptionPane.showMessageDialog(null, \"a lista2 nao existe\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tJuntaListasDePalavras juntaListas = new JuntaListasDePalavras();\n\t\t\tjuntaListas.juntarListas(lista1, lista2);\n\t\t\tJOptionPane.showMessageDialog(null, \"as listas foram juntadas\");\n\t\t}\n\t}\n\t\n\t\n\t\n\n\t@Override\n\tpublic void keyPressed(KeyEvent e) \n\t{\n\t\tint key = e.getKeyCode();\n        if(key == 40)\n        {\n        \t//se o usuario apertar a tecla da seta para baixo no teclado\n        \tif(textFieldLista1.isFocusOwner() == true)\n        \t{\n        \t\tthis.textFieldLista2.requestFocus();\n        \t}\n        \telse if(textFieldLista2.isFocusOwner() == true)\n        \t{\n        \t\tthis.juntarListas.requestFocus();\n        \t}\n        \telse if(juntarListas.isFocusOwner() == true)\n        \t{\n        \t\tthis.textFieldLista1.requestFocus();\n        \t}\n        }\n        else if(key == 38)\n        {\n        \t//se o usuario apertar a tecla da seta para cima no teclado\n        \tif(textFieldLista1.isFocusOwner() == true)\n        \t{\n        \t\tthis.juntarListas.requestFocus();\n        \t}\n        \telse if(textFieldLista2.isFocusOwner() == true)\n        \t{\n        \t\tthis.textFieldLista1.requestFocus();\n        \t}\n        \telse if(juntarListas.isFocusOwner() == true)\n        \t{\n        \t\tthis.textFieldLista2.requestFocus();\n        \t}\n        }\n        else if(key == KeyEvent.VK_ENTER)\n        {\n        \tif(this.juntarListas.isFocusOwner() == true)\n        \t{\n        \t\tthis.juntarListas();\n        \t}\n        }\n\t}\n\n\t@Override\n\tpublic void keyReleased(KeyEvent e) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n\n\t@Override\n\tpublic void keyTyped(KeyEvent e) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t}\n}\n","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,null,null,0,0,0,0,0,null,null,null,0,0,0,0,0,0,0,null,0,0,0,0,null,null,null,0,0,0,0,0,0,0,0,0,null,0,0,0,0,null,null,null,0,0,0,0,0,0,0,0,0,null,0,0,0,0,null,null,null,0,0,0,0,0,0,0,null,null,0,0,0,0,0,0,null,0,0,0,0,null,null,0,0,0,0,null,null,null,null,null,0,null,0,null,null,0,null,null,null,0,0,null,0,null,0,null,0,null,0,null,0,null,0,null,null,null,0,0,0,null,0,null,null,null,null,null,null,null,0,0,null,null,0,null,0,null,0,null,0,null,0,null,0,null,null,0,null,null,0,null,0,null,0,null,0,null,0,null,0,null,null,0,null,0,null,0,null,null,0,null,null,null,null,null,0,null,null,null,null,null,0,null,null],"name":"main/java/jogo/InterfaceJuntarListas.java"}]}